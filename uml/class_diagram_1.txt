@startuml
class           graph.Vertex{
-id: int
-info: Object
-color: String
+getId(): int
+setId()
+getInfo(): Object
+setInfo()
+getColor(): String
+setColor()
+toString(): String
}

class           graph.DirectedEdge extends graph.Edge{
-source: int
+getSource(): graph.Vertex
+getSink(): graph.Vertex
}

class           graph.UndirectedEdge extends graph.Edge{
+getEnds(): graph.Vertex []
}

class           graph.TestGraph{
+main()
}

abstract class           graph.Edge{
-id: int
-color: String
-ends: graph.Vertex[2]
-value: double
+getId(): int
+setId()
+getColor(): String
+setColor()
+getEnds(): graph.Vertex[2]
+setEnds()
+getValue(): double
+setValue()
}

interface graph.Graph{
+nbOfVertices():int
+nbOfEdges():int
+addVertex(graph.Vertex)
+addEdge(graph.Vertex,graph.Vertex,graph.EdgeKind)
+isConnected(graph.Vertex,graph.Vertex):boolean
+isConnected(graph.Vertex,graph.Vertex):boolean
+getEdges(graph.Vertex, graph.Vertex): graph.Edge[]
+getEdges(): graph.Edge []
+getVertices(): graph.Vertex []
+getNeighborEdges(graph.Vertex): graph.Edge []
}

enum graph.EdgeKind{
+states : String[]
}

graph.Edge --o "2" graph.Vertex
graph.TestGraph ..> graph.Vertex
graph.TestGraph ..> graph.Edge
graph.Graph ..> graph.EdgeKind
graph.Graph ..> graph.Vertex
graph.Graph ..> graph.Edge
@enduml